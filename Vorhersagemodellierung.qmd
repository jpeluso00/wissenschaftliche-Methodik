---
title: "Fahrradvermietungen"
subtitle: "Prognosemodell"
lang: de
author: "Marcel Albers, Koen Loogman, Jacques Peluso und Steffen Seegler"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    html-math-method: katex
  pdf:
    toc: true
    number-sections: false
    colorlinks: true 
    papersize: a4
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
library(mosaic)
library(here)
library(tidyverse)
library(psych)
```

<!-- Sollten Umlaute falsch angezeigt werden: "File -> Reopen with Encoding -> UTF8" -->

# Einleitung

<!-- Umfang von 0,5-1,5 Seiten -->


# Explorative Datenanalyse und Datenvorverarbeitung

<!-- Umfang von 2-4 Seiten -->

Daten einlesen:

```{r}
# Load data
anwendung <- here("data", "raw", "anwendung.csv") |> read.csv2()
train <- here("data", "raw", "train.csv") |> read.csv2()

# Show the structure of the data
str(anwendung)
str(train)
```

## Einfuehrungsphase

Handelt es sich um die Einführungsphase, d.h., ist das Angebot neu?

```{r}
gf_bar(~ einfuehrungsphase, data=train)
```

### Vermietungen in Abhängigkeit zur Einfuehrungsphase

```{r}
gf_boxplot(vermietungen ~ einfuehrungsphase, data=train)
```

## Jahreszeit

Jahreszeit. Kann man nicht viel mehr dazu sagen.

```{r}
gf_bar(~ jahreszeit, data=train)
```

### Vermietungen in Abhängigkeit zur Jahreszeit

```{r}
gf_boxplot(vermietungen ~ jahreszeit, data=train)
```

## Wetter

Die Wetterbeschreibung.

```{r}
gf_bar(~ wetter, data=train)
```

### Vermietungen in Abhängigkeit zum Wetter

```{r}
gf_boxplot(vermietungen ~ wetter, data=train)
```

## Arbeitstag

Handelt es sich um einen Werktag oder um Wochenende bzw. Feier- oder Ferientag?

```{r}
gf_bar(~ arbeitstag, data=train)
```

### Vermietungen in Abhängigkeit zum Arbeitstag

```{r}
gf_boxplot(vermietungen ~ arbeitstag, data=train)
```

## Temperatur

Temperatur in °C.

```{r}
fav_stats(train$temperatur)
gf_dhistogram(~ temperatur, data=train) |>
  gf_dens(linewidth = 2)
```

### Vermietungen in Abhängigkeit zur Temperatur

```{r}
gf_point(vermietungen ~ temperatur, data=train) |>
  gf_smooth()
```

## Windgeschwindigkeit

Windgeschwindigkeit in km/h.

```{r}
fav_stats(train$windgeschwindigkeit)
gf_dhistogram(~ windgeschwindigkeit, data=train) |>
  gf_dens(linewidth = 2)
```

### Vermietungen in Abhängigkeit zur Temperatur

```{r}
gf_point(vermietungen ~ windgeschwindigkeit, data=train) |>
  gf_smooth()
```

## Luftfeuchtigkeit

Luftfeuchtigkeit in %.

```{r}
fav_stats(train$luftfeuchtigkeit)
gf_dhistogram(~ luftfeuchtigkeit, data=train) |>
  gf_dens(linewidth = 2)
```

### Vermietungen in Abhängigkeit zur Luftfeuchtigkeit

```{r}
gf_point(vermietungen ~ luftfeuchtigkeit, data=train) |>
  gf_smooth()
```

## Preprocessing der Daten

https://www.geeksforgeeks.org/data-preprocessing-in-r/
```{r}
# Create a copy of the original data frames
encoded_anwendung <- anwendung
encoded_train <- train

head(train)
```

### Einfuehrungsphase

```{r}
# Define mappings
einfuehrungsphase_mapping <- c("Nein" = 0, "Ja" = 1) 

# Apply the encoding
encoded_train$einfuehrungsphase <- einfuehrungsphase_mapping[as.character(encoded_train$einfuehrungsphase)]
```

### Jahreszeit

```{r}
# Create a new data frame with the one-hot encoded variables 
encoded_jahreszeit <- as.data.frame(model.matrix(~ jahreszeit - 1, encoded_train)) 
head(encoded_jahreszeit)

# Add the new columns to the encoded data frame and remove the old column
encoded_train <- cbind(encoded_jahreszeit, encoded_train)
encoded_train$jahreszeit <- NULL
```

### Wetter

```{r}
# Define mapping
wetter_mapping <- c("Schlecht" = 0, "Nicht gut" = 1, "Gut" = 2)

# Apply the encoding
encoded_train$wetter <- wetter_mapping[as.character(encoded_train$wetter)]
```

### Arbeitstag

```{r}
# Define mappings
arbeitstag_mapping <- c("Nein" = 0, "Ja" = 1)

# Apply the encoding
encoded_train$arbeitstag <- arbeitstag_mapping[as.character(encoded_train$arbeitstag)]
```

### Temperatur

```{r}
# TODO: maybe standardize?
```

### Windgeschwindigkeit

```{r}
# TODO: maybe standardize?
```

### Luftfeuchtigkeit

```{r}
encoded_train$luftfeuchtigkeit <- train$luftfeuchtigkeit / 100
```

### Preprocessing Results

```{r}
describe(encoded_train)
```


# Methodenbeschreibung

<!-- Umfang von 2-4 Seiten -->

https://www.datacamp.com/tutorial/neural-network-models-r

Gehen Sie hier auf die verwendete Methode zur Modellierung, Variablen, und Modellauswahl ein. Zitieren Sie hier auch die methodische Literatur.

# Anwendung, Ergebnis und Vorhersage

<!-- Umfang von 2-4 Seiten -->

Wenden Sie hier Ihr Modell an und Interpretieren Sie Ihr Ergebnis. Bei Einzelarbeiten sollte der reine Text (ohne Code, Abbildungen etc.) einen Umfang von ca. 1--2 Seiten haben, bei Gruppenarbeiten einen von ca. 2--4 Seiten.

Modell schätzen:

```{r}

```

Modell zur Vorhersage anwenden:

```{r}

```

Kontrolle und Export:

```{r}

```


# 6. Zusammenfassung

<!-- Umfang von 0,5-1 Seiten -->

Fassen Sie kurz die zentralen Ergebnisse zusammen (0,5--1 Seite). Gehen Sie auch auf die Grenzen Ihrer Analyse ein.

*Hinweis:* Laden Sie das aus der qmd-Datei gerenderte pdf-Dokument als Prüfungsleistung im OC hoch (keine gedruckte Abgabe erforderlich). Als Zusatzmaterial laden Sie die qmd-Datei und die csv-Datei mit den Daten Ihrer Prognose (`Prognose_IhrName.csv`) hoch.


# Literatur

Hier stehen die im Text verwendeten Quellen:

- Nachname Autor1, Anfangsbuchstabe Vorname Autor1, Nachname Autor2, Anfangsbuchstabe Vorname Autor2 1 & Nachname Autor3, Anfangsbuchstabe Vorname Autor3 (Jahr der Veröffentlichung). Titel des Beitrags. Weitere Publikationsinformationen.

Im Text werden die Quellen nach der Harvard-Intext-Zitation in Klammern angegeben (siehe Leitfaden). 

**ChatGPT & Co:** Beachten Sie die Hinweise dazu im Leitfaden zur formalen Gestaltung von Seminar- und Abschlussarbeiten, Stand 24/01.
