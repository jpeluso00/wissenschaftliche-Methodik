---
title: "Fahrradvermietungen"
subtitle: "Prognosemodell"
lang: de
author: "Marcel Albers, Koen Loogman, Jacques Peluso und Steffen Seegler"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    html-math-method: katex
  pdf:
    toc: true
    number-sections: false
    colorlinks: true 
    papersize: a4
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
library(mosaic)
library(here)
library(tidyverse)
library(psych)
library(keras3)
library(tensorflow)

# Run once for setup
# install_tensorflow()
```

<!-- Sollten Umlaute falsch angezeigt werden: "File -> Reopen with Encoding -> UTF8" -->

# Einleitung

<!-- Umfang von 0,5-1,5 Seiten -->


# Explorative Datenanalyse und Datenvorverarbeitung

<!-- Umfang von 2-4 Seiten -->

Daten einlesen:

```{r}
# Load data
raw.application <- here("data", "raw", "anwendung.csv") |> read.csv2()
raw.dataset <- here("data", "raw", "train.csv") |> read.csv2()

# Show the structure of the data
str(raw.application)
str(raw.dataset)
```

## Einfuehrungsphase

Handelt es sich um die Einführungsphase, d.h., ist das Angebot neu?

```{r}
gf_bar(~ einfuehrungsphase, data=raw.dataset)
```

### Vermietungen in Abhängigkeit zur Einfuehrungsphase

```{r}
gf_boxplot(vermietungen ~ einfuehrungsphase, data=raw.dataset)
```

## Jahreszeit

Jahreszeit. Kann man nicht viel mehr dazu sagen.

```{r}
gf_bar(~ jahreszeit, data=raw.dataset)
```

### Vermietungen in Abhängigkeit zur Jahreszeit

```{r}
gf_boxplot(vermietungen ~ jahreszeit, data=raw.dataset)
```

## Wetter

Die Wetterbeschreibung.

```{r}
gf_bar(~ wetter, data=raw.dataset)
```

### Vermietungen in Abhängigkeit zum Wetter

```{r}
gf_boxplot(vermietungen ~ wetter, data=raw.dataset)
```

## Arbeitstag

Handelt es sich um einen Werktag oder um Wochenende bzw. Feier- oder Ferientag?

```{r}
gf_bar(~ arbeitstag, data=raw.dataset)
```

### Vermietungen in Abhängigkeit zum Arbeitstag

```{r}
gf_boxplot(vermietungen ~ arbeitstag, data=raw.dataset)
```

## Temperatur

Temperatur in °C.

```{r}
fav_stats(raw.dataset$temperatur)
gf_dhistogram(~ temperatur, data=raw.dataset) |>
  gf_dens(linewidth = 2)
```

### Vermietungen in Abhängigkeit zur Temperatur

```{r}
gf_point(vermietungen ~ temperatur, data=raw.dataset) |>
  gf_smooth()
```

## Windgeschwindigkeit

Windgeschwindigkeit in km/h.

```{r}
fav_stats(raw.dataset$windgeschwindigkeit)
gf_dhistogram(~ windgeschwindigkeit, data=raw.dataset) |>
  gf_dens(linewidth = 2)
```

### Vermietungen in Abhängigkeit zur Temperatur

```{r}
gf_point(vermietungen ~ windgeschwindigkeit, data=raw.dataset) |>
  gf_smooth()
```

## Luftfeuchtigkeit

Luftfeuchtigkeit in %.

```{r}
fav_stats(raw.dataset$luftfeuchtigkeit)
gf_dhistogram(~ luftfeuchtigkeit, data=raw.dataset) |>
  gf_dens(linewidth = 2)
```

### Vermietungen in Abhängigkeit zur Luftfeuchtigkeit

```{r}
gf_point(vermietungen ~ luftfeuchtigkeit, data=raw.dataset) |>
  gf_smooth()
```

## Preprocessing der Daten

Quelle: https://www.geeksforgeeks.org/data-preprocessing-in-r/

```{r}
preprocess <- function(dataset) {
  # Make a copy of the data
  dataset.copy <- dataset

  # Encode einfuehrungsphase and arbeitstag (binary encoding)
  yn_mapping <- c("Nein" = 0, "Ja" = 1)
  dataset.copy$einfuehrungsphase <- yn_mapping[as.character(dataset$einfuehrungsphase)]
  dataset.copy$arbeitstag <- yn_mapping[as.character(dataset$arbeitstag)]

  # Encode wetter (ordinal encoding)
  wetter_mapping <- c("Schlecht" = 0, "Nicht gut" = 1, "Gut" = 2)
  dataset.copy$wetter <- wetter_mapping[as.character(dataset$wetter)]

  # Encode jahreszeit (one-hot encoding)
  encoded_jahreszeit <- as.data.frame(model.matrix(~ jahreszeit - 1, dataset))

  # Add the new columns to the encoded data frame and remove the old column
  dataset.copy <- dataset.copy |>
    select(-jahreszeit)
  dataset.copy <- cbind(encoded_jahreszeit, dataset.copy)

  return(dataset.copy)
}
```

### Preprocessing Ergebnisse

```{r}
# Preprocess the data
application <- preprocess(raw.application)
dataset <- preprocess(raw.dataset)

# Data before preprocessing
head(raw.dataset)

# Data after preprocessing
head(dataset)

# Describe the data
describe(dataset)

# Prepare the data for training
dataset_features <- dataset |> select(-vermietungen)
dataset_labels <- dataset |> select(vermietungen)
```

# Methodenbeschreibung

<!-- Umfang von 2-4 Seiten -->

https://www.datacamp.com/tutorial/neural-network-models-r

Gehen Sie hier auf die verwendete Methode zur Modellierung, Variablen, und Modellauswahl ein. Zitieren Sie hier auch die methodische Literatur.

# Anwendung, Ergebnis und Vorhersage

<!-- Umfang von 2-4 Seiten -->

Wenden Sie hier Ihr Modell an und Interpretieren Sie Ihr Ergebnis. Bei Einzelarbeiten sollte der reine Text (ohne Code, Abbildungen etc.) einen Umfang von ca. 1--2 Seiten haben, bei Gruppenarbeiten einen von ca. 2--4 Seiten.

## Modell mit den Daten trainieren

```{r}
# Set a random seed for training
set_random_seed(69, disable_gpu = FALSE)

# Adapt a normalizer on the data as we didn't normalize it yet
normalizer <- layer_normalization(axis = -1L)
normalizer |> adapt(as.matrix(dataset_features))

# Define the input layer
input <- layer_input(shape = dim(dataset_features)[2])

# Define the feed forward and output
output <- input |>
  normalizer() |>
  layer_dense(units = 64, activation = 'relu') |>
  layer_dense(units = 64, activation = 'relu') |>
  layer_dense(units = 1)

# Build the model
model <- keras_model(input, output)

# Assign the optimizer and the metrics to use (mse and mae for regression)
model |> compile(
  optimizer = 'adam',
  loss = 'mse',
  metrics = list('mae')
)

# Train the model with a 20% validation split
model |> fit(
  as.matrix(dataset_features),
  as.matrix(dataset_labels),
  epochs = 100,
  batch_size = 32,
  validation_split = 0.2
)
```

## Modell zur Vorhersage anwenden

```{r}
# Predict with the model
predictions <- model(as.matrix(application))

# Add predictions to the application
pred.application <- raw.application
pred.application$vermietungen <-as.integer(predictions)
```

Kontrolle und Export:

```{r}
# Save results
write.csv2(pred.application, file = "Prognose_IhrName.csv")
```


# 6. Zusammenfassung

<!-- Umfang von 0,5-1 Seiten -->

Fassen Sie kurz die zentralen Ergebnisse zusammen (0,5--1 Seite). Gehen Sie auch auf die Grenzen Ihrer Analyse ein.

*Hinweis:* Laden Sie das aus der qmd-Datei gerenderte pdf-Dokument als Prüfungsleistung im OC hoch (keine gedruckte Abgabe erforderlich). Als Zusatzmaterial laden Sie die qmd-Datei und die csv-Datei mit den Daten Ihrer Prognose (`Prognose_IhrName.csv`) hoch.


# Literatur

Hier stehen die im Text verwendeten Quellen:

- Nachname Autor1, Anfangsbuchstabe Vorname Autor1, Nachname Autor2, Anfangsbuchstabe Vorname Autor2 1 & Nachname Autor3, Anfangsbuchstabe Vorname Autor3 (Jahr der Veröffentlichung). Titel des Beitrags. Weitere Publikationsinformationen.

Im Text werden die Quellen nach der Harvard-Intext-Zitation in Klammern angegeben (siehe Leitfaden). 

**ChatGPT & Co:** Beachten Sie die Hinweise dazu im Leitfaden zur formalen Gestaltung von Seminar- und Abschlussarbeiten, Stand 24/01.
